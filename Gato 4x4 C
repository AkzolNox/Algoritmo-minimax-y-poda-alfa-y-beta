#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define SIZE 4
#define PLAYER 'X'
#define AI 'O'
#define EMPTY '-'

// Estructura para representar un movimiento
typedef struct {
    int row;
    int col;
} Move;

// Función para imprimir el tablero
void printBoard(char board[SIZE][SIZE]) {
    printf("\n   ");
    for (int i = 0; i < SIZE; i++) {
        printf("%d   ", i);
    }
    printf("\n");
    
    for (int i = 0; i < SIZE; i++) {
        printf("%d  ", i);
        for (int j = 0; j < SIZE; j++) {
            printf("%c   ", board[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Función para verificar si hay ganador
char checkWinner(char board[SIZE][SIZE]) {
    // Verificar filas
    for (int i = 0; i < SIZE; i++) {
        if (board[i][0] != EMPTY && 
            board[i][0] == board[i][1] && 
            board[i][1] == board[i][2] && 
            board[i][2] == board[i][3]) {
            return board[i][0];
        }
    }
    
    // Verificar columnas
    for (int j = 0; j < SIZE; j++) {
        if (board[0][j] != EMPTY && 
            board[0][j] == board[1][j] && 
            board[1][j] == board[2][j] && 
            board[2][j] == board[3][j]) {
            return board[0][j];
        }
    }
    
    // Verificar diagonal principal
    if (board[0][0] != EMPTY && 
        board[0][0] == board[1][1] && 
        board[1][1] == board[2][2] && 
        board[2][2] == board[3][3]) {
        return board[0][0];
    }
    
    // Verificar diagonal secundaria
    if (board[0][3] != EMPTY && 
        board[0][3] == board[1][2] && 
        board[1][2] == board[2][1] && 
        board[2][1] == board[3][0]) {
        return board[0][3];
    }
    
    return EMPTY;
}

// Función para verificar si el tablero está lleno
bool isBoardFull(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == EMPTY) {
                return false;
            }
        }
    }
    return true;
}

// Función para evaluar el estado del tablero
int evaluate(char board[SIZE][SIZE]) {
    char winner = checkWinner(board);
    
    if (winner == AI) return 10;
    if (winner == PLAYER) return -10;
    return 0;
}

// Algoritmo Minimax con poda Alfa-Beta
int minimax(char board[SIZE][SIZE], int depth, bool isMax, int alpha, int beta) {
    int score = evaluate(board);
    
    // Si hay ganador o empate
    if (score == 10) return score - depth;
    if (score == -10) return score + depth;
    if (isBoardFull(board)) return 0;
    
    // Límite de profundidad para optimización
    if (depth > 6) return 0;
    
    if (isMax) {
        int best = INT_MIN;
        
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = AI;
                    int val = minimax(board, depth + 1, false, alpha, beta);
                    board[i][j] = EMPTY;
                    
                    best = (val > best) ? val : best;
                    alpha = (alpha > best) ? alpha : best;
                    
                    if (beta <= alpha)
                        break;
                }
            }
        }
        return best;
    } else {
        int best = INT_MAX;
        
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    board[i][j] = PLAYER;
                    int val = minimax(board, depth + 1, true, alpha, beta);
                    board[i][j] = EMPTY;
                    
                    best = (val < best) ? val : best;
                    beta = (beta < best) ? beta : best;
                    
                    if (beta <= alpha)
                        break;
                }
            }
        }
        return best;
    }
}

// Encuentra el mejor movimiento para la IA
Move findBestMove(char board[SIZE][SIZE]) {
    int bestVal = INT_MIN;
    Move bestMove = {-1, -1};
    
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == EMPTY) {
                board[i][j] = AI;
                int moveVal = minimax(board, 0, false, INT_MIN, INT_MAX);
                board[i][j] = EMPTY;
                
                if (moveVal > bestVal) {
                    bestMove.row = i;
                    bestMove.col = j;
                    bestVal = moveVal;
                }
            }
        }
    }
    
    return bestMove;
}

int main() {
    char board[SIZE][SIZE];
    
    // Inicializar tablero
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            board[i][j] = EMPTY;
        }
    }
    
    printf("=== JUEGO DE GATO 4x4 ===\n");
    printf("Tu eres X, la IA es O\n");
    printf("Ingresa fila y columna (0-3)\n");
    
    while (true) {
        printBoard(board);
        
        // Turno del jugador
        int row, col;
        printf("Tu turno. Ingresa fila: ");
        scanf("%d", &row);
        printf("Ingresa columna: ");
        scanf("%d", &col);
        
        if (row < 0 || row >= SIZE || col < 0 || col >= SIZE || board[row][col] != EMPTY) {
            printf("Movimiento invalido. Intenta de nuevo.\n");
            continue;
        }
        
        board[row][col] = PLAYER;
        
        // Verificar si el jugador ganó
        if (checkWinner(board) == PLAYER) {
            printBoard(board);
            printf("¡Felicidades! Has ganado.\n");
            break;
        }
        
        if (isBoardFull(board)) {
            printBoard(board);
            printf("¡Empate!\n");
            break;
        }
        
        // Turno de la IA
        printf("Turno de la IA...\n");
        Move aiMove = findBestMove(board);
        board[aiMove.row][aiMove.col] = AI;
        printf("IA jugo en: (%d, %d)\n", aiMove.row, aiMove.col);
        
        // Verificar si la IA ganó
        if (checkWinner(board) == AI) {
            printBoard(board);
            printf("La IA ha ganado.\n");
            break;
        }
        
        if (isBoardFull(board)) {
            printBoard(board);
            printf("¡Empate!\n");
            break;
        }
    }
    
    return 0;
}
