import sys

SIZE = 4
PLAYER = 'X'
AI = 'O'
EMPTY = '-'

def print_board(board):
    """Imprime el tablero de juego"""
    print("\n   ", end="")
    for i in range(SIZE):
        print(f"{i}   ", end="")
    print("\n")
    
    for i in range(SIZE):
        print(f"{i}  ", end="")
        for j in range(SIZE):
            print(f"{board[i][j]}   ", end="")
        print()
    print()

def check_winner(board):
    """Verifica si hay un ganador"""
    # Verificar filas
    for i in range(SIZE):
        if (board[i][0] != EMPTY and 
            board[i][0] == board[i][1] == board[i][2] == board[i][3]):
            return board[i][0]
    
    # Verificar columnas
    for j in range(SIZE):
        if (board[0][j] != EMPTY and 
            board[0][j] == board[1][j] == board[2][j] == board[3][j]):
            return board[0][j]
    
    # Verificar diagonal principal
    if (board[0][0] != EMPTY and 
        board[0][0] == board[1][1] == board[2][2] == board[3][3]):
        return board[0][0]
    
    # Verificar diagonal secundaria
    if (board[0][3] != EMPTY and 
        board[0][3] == board[1][2] == board[2][1] == board[3][0]):
        return board[0][3]
    
    return None

def is_board_full(board):
    """Verifica si el tablero está lleno"""
    for i in range(SIZE):
        for j in range(SIZE):
            if board[i][j] == EMPTY:
                return False
    return True

def evaluate(board):
    """Evalúa el estado del tablero"""
    winner = check_winner(board)
    
    if winner == AI:
        return 10
    elif winner == PLAYER:
        return -10
    else:
        return 0

def minimax(board, depth, is_max, alpha, beta):
    """Algoritmo Minimax con poda Alfa-Beta"""
    score = evaluate(board)
    
    # Condiciones de terminación
    if score == 10:
        return score - depth
    if score == -10:
        return score + depth
    if is_board_full(board):
        return 0
    
    # Límite de profundidad para optimización
    if depth > 6:
        return 0
    
    if is_max:
        best = -sys.maxsize
        
        for i in range(SIZE):
            for j in range(SIZE):
                if board[i][j] == EMPTY:
                    board[i][j] = AI
                    value = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = EMPTY
                    
                    best = max(best, value)
                    alpha = max(alpha, best)
                    
                    if beta <= alpha:
                        break
            if beta <= alpha:
                break
        
        return best
    else:
        best = sys.maxsize
        
        for i in range(SIZE):
            for j in range(SIZE):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER
                    value = minimax(board, depth + 1, True, alpha, beta)
                    board[i][j] = EMPTY
                    
                    best = min(best, value)
                    beta = min(beta, best)
                    
                    if beta <= alpha:
                        break
            if beta <= alpha:
                break
        
        return best

def find_best_move(board):
    """Encuentra el mejor movimiento para la IA"""
    best_val = -sys.maxsize
    best_move = (-1, -1)
    
    for i in range(SIZE):
        for j in range(SIZE):
            if board[i][j] == EMPTY:
                board[i][j] = AI
                move_val = minimax(board, 0, False, -sys.maxsize, sys.maxsize)
                board[i][j] = EMPTY
                
                if move_val > best_val:
                    best_move = (i, j)
                    best_val = move_val
    
    return best_move

def main():
    """Función principal del juego"""
    # Inicializar tablero
    board = [[EMPTY for _ in range(SIZE)] for _ in range(SIZE)]
    
    print("=== JUEGO DE GATO 4x4 ===")
    print("Tú eres X, la IA es O")
    print("Ingresa fila y columna (0-3)")
    
    while True:
        print_board(board)
        
        # Turno del jugador
        try:
            row = int(input("Tu turno. Ingresa fila: "))
            col = int(input("Ingresa columna: "))
            
            if row < 0 or row >= SIZE or col < 0 or col >= SIZE or board[row][col] != EMPTY:
                print("Movimiento inválido. Intenta de nuevo.")
                continue
            
            board[row][col] = PLAYER
            
            # Verificar si el jugador ganó
            if check_winner(board) == PLAYER:
                print_board(board)
                print("¡Felicidades! Has ganado.")
                break
            
            if is_board_full(board):
                print_board(board)
                print("¡Empate!")
                break
            
            # Turno de la IA
            print("Turno de la IA...")
            ai_row, ai_col = find_best_move(board)
            board[ai_row][ai_col] = AI
            print(f"IA jugó en: ({ai_row}, {ai_col})")
            
            # Verificar si la IA ganó
            if check_winner(board) == AI:
                print_board(board)
                print("La IA ha ganado.")
                break
            
            if is_board_full(board):
                print_board(board)
                print("¡Empate!")
                break
                
        except ValueError:
            print("Por favor ingresa números válidos.")
        except KeyboardInterrupt:
            print("\n¡Juego terminado!")
            break

if __name__ == "__main__":
    main()
